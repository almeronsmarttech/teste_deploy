from django.views.generic import TemplateView
import random
from django.views.generic import FormView, View
from django.conf import settings
from django.urls import reverse_lazy
from .forms import EmailLoginForm
from django.shortcuts import render
from django.http import HttpResponse
from django.core.mail import send_mail
from django.utils.crypto import get_random_string
from django.views.generic import FormView
from django.contrib.auth import login, logout
from django.contrib.auth import get_user_model
from django.http import HttpResponseBadRequest
from apps.loginapp.models import MyCustomUser
from django.shortcuts import redirect  # Importe o redirect no topo
from django.views.generic.edit import CreateView
from .forms import UserCreationForm

User = get_user_model()
attempts = {}  # Dicion√°rio para armazenar tentativas tempor√°rias

def header_partial(request):
    return render(request, "partials/header.html")

class UserCreationView(CreateView):
    form_class = UserCreationForm
    template_name = 'loginapp/user_creation_form.html'  # O template a ser usado
    success_url = reverse_lazy('home')  # Ap√≥s a cria√ß√£o do usu√°rio, redireciona para a home

class SignupPartialView(TemplateView):
    template_name = "loginapp/signup_partial.html"

class SendVerificationCodeView(View):
    def post(self, request, *args, **kwargs):
        email = request.POST.get("email")
        #print(f"üìå Recebido pedido de login para o e-mail: {email}")

        if not email:
            #print("üö® Erro: Nenhum e-mail fornecido!")
            return HttpResponse("E-mail √© obrigat√≥rio.", status=400)

        try:
            user = MyCustomUser.objects.get(email=email)

            # Gerar e salvar c√≥digo de verifica√ß√£o
            verification_code = get_random_string(length=6, allowed_chars="0123456789")
            user.verification_code = verification_code
            user.save()

            # **Salvar o e-mail na sess√£o**
            request.session["pending_email"] = email
            request.session.modified = True  # Garante que a sess√£o seja salva
            #print(f"‚úÖ E-mail salvo na sess√£o: {request.session['pending_email']}")

            # Enviar e-mail
            send_mail(
                subject="Seu C√≥digo de Verifica√ß√£o",
                message=f"Seu c√≥digo de verifica√ß√£o √©: {verification_code}",
                from_email=settings.EMAIL_HOST_USER,
                recipient_list=[email],
                fail_silently=False,
            )

            #print("‚úÖ C√≥digo de verifica√ß√£o enviado com sucesso!")

            # Retorna o template de verifica√ß√£o para inserir o c√≥digo
            return render(request, "loginapp/verify_code_partial.html")

        except MyCustomUser.DoesNotExist:
            #print("üö® Erro: Usu√°rio n√£o encontrado!")
            return HttpResponse("Usu√°rio n√£o encontrado.", status=400)

class VerifyCodeView(View):
    def post(self, request, *args, **kwargs):
        verification_code = request.POST.get("verification_code")
        email = request.session.get("pending_email")  # Obt√©m o e-mail salvo na sess√£o

        #print(f"üìå Tentativa de verifica√ß√£o de c√≥digo!")
        #print(f"üìå C√≥digo recebido: {verification_code}")
        #print(f"üìå E-mail armazenado na sess√£o: {email}")

        if not email:
            #print("üö® Erro: Nenhum e-mail encontrado na sess√£o!")
            return HttpResponseBadRequest("Sess√£o expirada. Refa√ßa o login.")

        try:
            user = MyCustomUser.objects.get(email=email)

            #print(f"‚úÖ Usu√°rio encontrado: {user.email}")
            #print(f"‚úÖ C√≥digo armazenado no usu√°rio: {user.verification_code}")

            if user.verification_code == verification_code:
                #print("‚úÖ C√≥digo correto! Autenticando usu√°rio...")

                user.backend = 'django.contrib.auth.backends.ModelBackend'
                login(request, user)

                request.session.pop("pending_email", None)  # Remove o e-mail da sess√£o ap√≥s login
                #print("‚úÖ Usu√°rio autenticado com sucesso!")

                return redirect("/")  # üîÑ Redireciona para a home ap√≥s autentica√ß√£o

            else:
                #print("üö® C√≥digo inv√°lido!")
                return HttpResponseBadRequest("C√≥digo inv√°lido. Tente novamente.")

        except MyCustomUser.DoesNotExist:
            #print("üö® Erro: Usu√°rio n√£o encontrado!")
            return HttpResponseBadRequest("Usu√°rio n√£o encontrado.")

class EmailLoginView(FormView):
    template_name = "loginapp/login_partial.html"
    form_class = EmailLoginForm
    success_url = reverse_lazy("verify_code")

    def form_valid(self, form):
        email = form.cleaned_data["email"]
        # Aqui enviamos o c√≥digo por e-mail (implemente a l√≥gica real depois)
        return render(self.request, "loginapp/verify_email_partial.html", {"email": email})


class VerifyCodeView(View):
    def post(self, request, *args, **kwargs):
        verification_code = request.POST.get("verification_code")
        email = request.session.get("pending_email")

        if not email:
            return HttpResponse("Sess√£o expirada. Refa√ßa o login.", status=400)

        try:
            user = User.objects.get(email=email)

            if user.verification_code == verification_code:
                user.backend = 'django.contrib.auth.backends.ModelBackend'
                login(request, user)
                request.session.pop("pending_email", None)  # Remove a sess√£o

                # üîÑ **HTMX redireciona para a home**
                response = HttpResponse()
                response["HX-Redirect"] = "/"
                return response

            else:
                return HttpResponse("C√≥digo inv√°lido. Tente novamente.", status=400)

        except User.DoesNotExist:
            return HttpResponse("Usu√°rio n√£o encontrado.", status=400)


class ResendCodeView(View):
    """Reenvia o c√≥digo de verifica√ß√£o"""
    def post(self, request, *args, **kwargs):
        email = request.session.get("pending_email")
        if not email:
            return redirect("account_login")

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return redirect("account_login")

        # Gera um novo c√≥digo e envia novamente
        verification_code = str(random.randint(100000, 999999))
        user.verification_code = verification_code
        user.save()

        send_mail(
            "Novo C√≥digo de Verifica√ß√£o",
            f"Seu novo c√≥digo de verifica√ß√£o √©: {verification_code}",
            settings.EMAIL_HOST_USER,
            [email],
            fail_silently=False,
        )
        return render(request, "loginapp/verify_code_partial.html", {"email": email, "message": "C√≥digo reenviado com sucesso!"})


class FormPartialView(TemplateView):
    template_name = 'loginapp/login.html'
